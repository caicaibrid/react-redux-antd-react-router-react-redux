{"version":3,"sources":["webpack.config.prod.js"],"names":[],"mappings":"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","file":"webpack.config.prod-compiled.js","sourcesContent":["'use strict';\n\nvar autoprefixer = require('autoprefixer');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar ManifestPlugin = require('webpack-manifest-plugin');\nvar InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nvar paths = require('./paths');\nvar getClientEnvironment = require('./env');\n\n\n// Webpack uses `publicPath` to determine where the app is being served from.\n// It requires a trailing slash, or the file assets will get an incorrect path.\nvar publicPath = paths.servedPath;\n// Some apps do not use client-side routing with pushState.\n// For these, \"homepage\" can be set to \".\" to enable relative asset paths.\nvar shouldUseRelativeAssetPaths = publicPath === './';\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n// Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\nvar publicUrl = publicPath.slice(0, -1);\n// Get environment variables to inject into our app.\nvar env = getClientEnvironment(publicUrl);\n\n// Assert this just to be safe.\n// Development builds of React are slow and not intended for production.\nif (env.stringified['process.env'].NODE_ENV !== '\"production\"') {\n  throw new Error('Production builds must have NODE_ENV=production.');\n}\n\n// Note: defined here because it will be used more than once.\nconst cssFilename = 'static/css/[name].[contenthash:8].css';\n\n// ExtractTextPlugin expects the build output to be flat.\n// (See https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/27)\n// However, our output is structured with css, js and media folders.\n// To have this structure working with relative paths, we have to use custom options.\nconst extractTextPluginOptions = shouldUseRelativeAssetPaths\n  // Making sure that the publicPath goes back to to build folder.\n  ? { publicPath: Array(cssFilename.split('/').length).join('../') }\n  : undefined;\n\n// This is the production configuration.\n// It compiles slowly and is focused on producing a fast and minimal bundle.\n// The development configuration is different and lives in a separate file.\nmodule.exports = {\n  // Don't attempt to continue if there are any errors.\n  bail: true,\n  // We generate sourcemaps in production. This is slow but gives good results.\n  // You can exclude the *.map files from the build during deployment.\n  devtool: 'source-map',\n  // In production, we only want to load the polyfills and the app code.\n  entry: [\n    require.resolve('./polyfills'),\n    paths.appIndexJs\n  ],\n  output: {\n    // The build folder.\n    path: paths.appBuild,\n    // Generated JS file names (with nested folders).\n    // There will be one main bundle, and one file per asynchronous chunk.\n    // We don't currently advertise code splitting but Webpack supports it.\n    filename: 'static/js/[name].[chunkhash:8].js',\n    chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',\n    // We inferred the \"public path\" (such as / or /my-project) from homepage.\n    publicPath: publicPath\n  },\n  resolve: {\n    // This allows you to set a fallback for where Webpack should look for modules.\n    // We read `NODE_PATH` environment variable in `paths.js` and pass paths here.\n    // We use `fallback` instead of `root` because we want `node_modules` to \"win\"\n    // if there any conflicts. This matches Node resolution mechanism.\n    // https://github.com/facebookincubator/create-react-app/issues/253\n    fallback: paths.nodePaths,\n    // These are the reasonable defaults supported by the Node ecosystem.\n    // We also include JSX as a common component filename extension to support\n    // some tools, although we do not recommend using it, see:\n    // https://github.com/facebookincubator/create-react-app/issues/290\n    extensions: ['.js', '.json', '.jsx', ''],\n    alias: {\n      // Support React Native Web\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n      'react-native': 'react-native-web'\n    }\n  },\n  \n  module: {\n    // First, run the linter.\n    // It's important to do this before Babel processes the JS.\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint',\n        include: paths.appSrc\n      }\n    ],\n    loaders: [\n      // ** ADDING/UPDATING LOADERS **\n      // The \"url\" loader handles all assets unless explicitly excluded.\n      // The `exclude` list *must* be updated with every change to loader extensions.\n      // When adding a new loader, you must add its `test`\n      // as a new entry in the `exclude` list in the \"url\" loader.\n\n      // \"url\" loader embeds assets smaller than specified size as data URLs to avoid requests.\n      // Otherwise, it acts like the \"file\" loader.\n      {\n        exclude: [\n          /\\.html$/,\n          /\\.(js|jsx)$/,\n          /\\.css$/,\n          /\\.json$/,\n          /\\.svg$/,\n          /\\.scss$/\n        ],\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      },\n      // Process JS with Babel.\n      {\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: 'babel',\n        \n      },\n      // The notation here is somewhat confusing.\n      // \"postcss\" loader applies autoprefixer to our CSS.\n      // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n      // \"style\" loader normally turns CSS into JS modules injecting <style>,\n      // but unlike in development configuration, we do something different.\n      // `ExtractTextPlugin` first applies the \"postcss\" and \"css\" loaders\n      // (second argument), then grabs the result CSS and puts it into a\n      // separate file in our build process. This way we actually ship\n      // a single CSS file in production instead of JS code injecting <style>\n      // tags. If you use code splitting, however, any async bundles will still\n      // use the \"style\" loader inside the async code so CSS from them won't be\n      // in the main CSS file.\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          'style',\n          'css?importLoaders=1!postcss',\n          extractTextPluginOptions\n        )\n        // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.\n      },\n      // JSON is not enabled by default in Webpack but both Node and Browserify\n      // allow it implicitly so we also enable it.\n      {\n        test: /\\.json$/,\n        loader: 'json'\n      },\n      // \"file\" loader for scss\n      {\n          test: /\\.scss$/,\n          loader: 'style!css!postcss!sass?outputStyle=expanded'\n\n      },\n      // \"file\" loader for svg\n      {\n        test: /\\.svg$/,\n        loader: 'file',\n        query: {\n          name: 'static/media/[name].[hash:8].[ext]'\n        }\n      }\n      // ** STOP ** Are you adding a new loader?\n      // Remember to add the new extension(s) to the \"url\" loader exclusion list.\n    ]\n  },\n  \n  // We use PostCSS for autoprefixing only.\n  postcss: function() {\n    return [\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ]\n      })\n    ];\n  },\n  plugins: [\n    // Makes some environment variables available in index.html.\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In production, it will be an empty string unless you specify \"homepage\"\n    // in `package.json`, in which case it will be the pathname of that URL.\n    new InterpolateHtmlPlugin(env.raw),\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true\n      }\n    }),\n    // Makes some environment variables available to the JS code, for example:\n    // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n    // It is absolutely essential that NODE_ENV was set to production here.\n    // Otherwise React will be compiled in the very slow development mode.\n    new webpack.DefinePlugin(env.stringified),\n    // This helps ensure the builds are consistent if source hasn't changed:\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    // Try to dedupe duplicated modules, if any:\n    new webpack.optimize.DedupePlugin(),\n    // Minify the code.\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        screw_ie8: true, // React doesn't support IE8\n        warnings: false\n      },\n      mangle: {\n        screw_ie8: true\n      },\n      output: {\n        comments: false,\n        screw_ie8: true\n      }\n    }),\n    // Note: this won't work without ExtractTextPlugin.extract(..) in `loaders`.\n    new ExtractTextPlugin(cssFilename),\n    // Generate a manifest file which contains a mapping of all asset filenames\n    // to their corresponding output file so that tools can pick it up without\n    // having to parse `index.html`.\n    new ManifestPlugin({\n      fileName: 'asset-manifest.json'\n    })\n  ],\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  node: {\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty'\n  }\n};\n"]}